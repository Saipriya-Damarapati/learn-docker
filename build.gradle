import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.bmuschko.docker-remote-api' version '9.4.0'
}

group = 'com.learn.docker'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('copy') {
	dependsOn build       // make sure the JAR exists

	// copy required files only to docker-context folder
	file("$projectDir/docker-context").delete()
	file("$projectDir/docker-context").mkdir()

	// Prepare the Docker context
	doLast {
		copy {
			from("$projectDir/Dockerfile") // copy only needed files
			into("$projectDir/docker-context")
		}
		copy {
			from("$projectDir/build/libs") // copy only needed files
			into("$projectDir/docker-context/build/libs")
		}
	}
}

docker {
	registryCredentials {
		url = 'https://index.docker.io/v1/'
		username = project.findProperty('hub_docker_username')
		password = project.findProperty('hub_docker_password')
	}
}

tasks.register('buildDockerImage', DockerBuildImage) {
	dependsOn copy       // make sure the JAR exists
	inputDir = file("$projectDir/docker-context") // use a clean temp folder
	dockerFile = file("$projectDir/docker-context/Dockerfile")
	images.add("saipriyadamarapati/courses-api-image:v1")
}

tasks.register('pushDockerImage', DockerPushImage) {
	dependsOn buildDockerImage
	images.add("saipriyadamarapati/courses-api-image:v1")
}

tasks.register('createDockerContainer', DockerCreateContainer) {
	dependsOn pushDockerImage
	imageId.set(tasks.buildDockerImage.getImageId())
	containerName = "courses-api-container"
	hostConfig.portBindings = ['5005:5005']
}

tasks.register('startDockerContainer', DockerStartContainer) {
	dependsOn createDockerContainer
	containerId.set(tasks.createDockerContainer.getContainerId())
}
